// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum Sex {
  Male
  Female
  Other
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  lastName       String
  username       String  @unique
  email          String  @unique
  hashedPassword String?
  role           String  @default("USER")
  emailVerified  Boolean @default(false)

  sex Sex

  tokens   Token[]
  sessions Session[]

  createdEvents Event[] @relation("user_owned_events") // // "user_owned_events" is a { 1 -> n } realation
  joinedEvents  Event[] @relation("event_participants") // "event_participants" is a { n -> m } realation

  followers Follower[] @relation("followers")
  followees Follower[] @relation("followees")

  images  Images? @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId String? @unique

  providers Provider[]
}

model Images {
  id String @id @default(uuid())

  url_small  String
  url_medium String
  url_large  String


  user  User?
  event Event?
}

model Follower {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  follower   User   @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String

  followee   User   @relation("followees", fields: [followeeId], references: [id], onDelete: Cascade)
  followeeId String

  @@unique([followerId, followeeId])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

enum EventVisibility {
  Public
  Private
}

model Event {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  date     DateTime
  capacity Int

  visibility EventVisibility @default(Public)

  owner   User   @relation("user_owned_events", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  participants User[] @relation("event_participants")

  location Location?

  images  Images? @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId String? @unique
}

model Location {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  latitude  Float
  longitude Float
  alias     String

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String @unique
}

model Provider {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  url      String
  services Service[]

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Service {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  price       Float

  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId String
}
